/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var k=(o,i)=>{for(var t in i)c(o,t,{get:i[t],enumerable:!0})},S=(o,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of b(i))!m.call(o,s)&&s!==t&&c(o,s,{get:()=>i[s],enumerable:!(e=h(i,s))||e.enumerable});return o};var v=o=>S(c({},"__esModule",{value:!0}),o);var w={};k(w,{default:()=>d});module.exports=v(w);var r=require("obsidian"),f={backgrounds:["https://example.com/image1.jpg","https://example.com/image2.jpg","https://example.com/image3.jpg"],opacitySettings:{viewContent:.5,tabHeaderContainer:.4,tabHeader:.3,workspaceLeaf:.6,kanbanItem:.7}},d=class extends r.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new g(this.app,this)),this.addCommand({id:"change-background",name:"Change Background",callback:()=>this.updateBackgrounds()}),this.updateBackgrounds(),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{this.updateBackgrounds()}))}getRandomBackground(){let t=this.settings.backgrounds,e=Math.floor(Math.random()*t.length);return t[e]}applyBackgroundAndOverlay(t,e){let s=this.getRandomBackground();t.forEach(a=>{if(a.style.backgroundImage=`url("${s}")`,a.style.backgroundSize="cover",a.style.backgroundPosition="center",a.style.position="relative",a.style.zIndex="2",a.style.boxShadow="10px 10px 5px 0px rgba(0, 0, 0, 0.75)",a.style.border="1px orange solid",!a.querySelector(".background-overlay")){let n=document.createElement("div");n.className="background-overlay",n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.height="100%",n.style.backgroundColor=`rgba(255, 255, 255, ${e})`,n.style.zIndex="-1",n.style.pointerEvents="none",a.appendChild(n)}})}updateBackgrounds(){let t=document.querySelectorAll(".view-content");this.applyBackgroundAndOverlay(t,this.settings.opacitySettings.viewContent);let e=document.querySelectorAll(".workspace-tab-header-container");this.applyBackgroundAndOverlay(e,this.settings.opacitySettings.tabHeaderContainer);let s=document.querySelectorAll(".workspace-tab-header");this.applyBackgroundAndOverlay(s,this.settings.opacitySettings.tabHeader);let a=document.querySelectorAll(".view-header");this.applyBackgroundAndOverlay(a,this.settings.opacitySettings.tabHeader);let n=document.querySelectorAll(".workspace-leaf");this.applyBackgroundAndOverlay(n,this.settings.opacitySettings.workspaceLeaf),new MutationObserver(u=>{u.forEach(y=>{if(y.addedNodes.length>0){let l=document.querySelectorAll(".kanban-plugin__lane");l.length>0&&this.applyBackgroundAndOverlay(l,this.settings.opacitySettings.viewContent);let p=document.querySelectorAll(".kanban-plugin__item-title-wrapper");p.length>0&&this.applyBackgroundAndOverlay(p,this.settings.opacitySettings.kanbanItem)}})}).observe(document.body,{childList:!0,subtree:!0})}onunload(){}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},g=class extends r.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Settings for Random Background Plugin"}),new r.Setting(t).setName("Background Images").setDesc("Add URLs for background images").addTextArea(e=>e.setPlaceholder("Enter URLs separated by commas").setValue(this.plugin.settings.backgrounds.join(", ")).onChange(async s=>{this.plugin.settings.backgrounds=s.split(",").map(a=>a.trim()),await this.plugin.saveSettings()})),this.addOpacitySetting(t,"viewContent","View Content Opacity"),this.addOpacitySetting(t,"tabHeaderContainer","Tab Header Container Opacity"),this.addOpacitySetting(t,"tabHeader","Tab Header Opacity"),this.addOpacitySetting(t,"workspaceLeaf","Workspace Leaf Opacity"),this.addOpacitySetting(t,"kanbanItem","Kanban Item Opacity")}addOpacitySetting(t,e,s){new r.Setting(t).setName(s).addSlider(a=>a.setLimits(0,1,.1).setValue(this.plugin.settings.opacitySettings[e]).onChange(async n=>{this.plugin.settings.opacitySettings[e]=n,await this.plugin.saveSettings()}).setDynamicTooltip())}};
